(set-logic SEPLOG)

(declare-sort Loc 0)

(declare-datatype Node ((node (left Loc) (right Loc)
                                            (parent Loc) (next Loc))))

(define-fun-rec tll_plus ((root Loc) (parent Loc) (ll Loc) (lr Loc)) Bool
    (or (and (pto root (node (as nil Loc) (as nil Loc) parent lr))
             (= root ll))
        (exists ((l Loc) (r Loc) (z Loc))
            (sep (pto root (node l r parent (as nil Loc)))
                 (tll_plus l root ll z)
                 (tll_plus r root z lr))
        )
    )
)

(define-fun-rec tll_tail ((root Loc) (parent Loc) (ll Loc) (tr Loc) (lr Loc)) Bool
    (or (and (pto root (node (as nil Loc) (as nil Loc) parent lr))
             (= root ll)
             (= root tr))
        (exists ((l Loc) (r Loc) (z Loc))
            (sep (pto root (node l r parent (as nil Loc)))
                 (tll_plus l root ll z)
                 (tll_tail r root z tr lr))
        )
    )
)

(declare-const root0 Loc) (declare-const ll0 Loc) (declare-const tr0 Loc)
(declare-const root1 Loc) (declare-const ll1 Loc) (declare-const tr1 Loc)
(declare-const root2 Loc) (declare-const ll2 Loc) (declare-const tr2 Loc)
(declare-const root3 Loc) (declare-const ll3 Loc) (declare-const tr3 Loc)
(declare-const root4 Loc) (declare-const ll4 Loc) (declare-const tr4 Loc)
(declare-const root5 Loc) (declare-const ll5 Loc) (declare-const tr5 Loc)
(declare-const root6 Loc) (declare-const ll6 Loc) (declare-const tr6 Loc)
(declare-const root7 Loc) (declare-const ll7 Loc) (declare-const tr7 Loc)
(declare-const root8 Loc) (declare-const ll8 Loc) (declare-const tr8 Loc)
(declare-const root9 Loc) (declare-const ll9 Loc) (declare-const tr9 Loc)
(declare-const root10 Loc) (declare-const ll10 Loc) (declare-const tr10 Loc)
(declare-const root11 Loc) (declare-const ll11 Loc) (declare-const tr11 Loc)
(declare-const root12 Loc) (declare-const ll12 Loc) (declare-const tr12 Loc)
(declare-const root13 Loc) (declare-const ll13 Loc) (declare-const tr13 Loc)
(declare-const root14 Loc) (declare-const ll14 Loc) (declare-const tr14 Loc)
(declare-const root15 Loc) (declare-const ll15 Loc) (declare-const tr15 Loc)
(declare-const root16 Loc) (declare-const ll16 Loc) (declare-const tr16 Loc)
(declare-const root17 Loc) (declare-const ll17 Loc) (declare-const tr17 Loc)
(declare-const root18 Loc) (declare-const ll18 Loc) (declare-const tr18 Loc)
(declare-const root19 Loc) (declare-const ll19 Loc) (declare-const tr19 Loc)

(assert (sep (tll_tail root0 (as nil Loc) ll0 tr0 root1)
             (tll_tail root1 tr0 ll1 tr1 root2)
             (tll_tail root2 tr1 ll2 tr2 root3)
             (tll_tail root3 tr2 ll3 tr3 root4)
             (tll_tail root4 tr3 ll4 tr4 root5)
             (tll_tail root5 tr4 ll5 tr5 root6)
             (tll_tail root6 tr5 ll6 tr6 root7)
             (tll_tail root7 tr6 ll7 tr7 root8)
             (tll_tail root8 tr7 ll8 tr8 root9)
             (tll_tail root9 tr8 ll9 tr9 root10)
             (tll_tail root10 tr9 ll10 tr10 root11)
             (tll_tail root11 tr10 ll11 tr11 root12)
             (tll_tail root12 tr11 ll12 tr12 root13)
             (tll_tail root13 tr12 ll13 tr13 root14)
             (tll_tail root14 tr13 ll14 tr14 root15)
             (tll_tail root15 tr14 ll15 tr15 root16)
             (tll_tail root16 tr15 ll16 tr16 root17)
             (tll_tail root17 tr16 ll17 tr17 root18)
             (tll_tail root18 tr17 ll18 tr18 root19)
             (tll_tail root19 tr18 ll19 tr19 (as nil Loc))
        )
)

(assert (not (exists ((root0 Loc) (ll0 Loc) (tr0 Loc)
                      (root1 Loc) (ll1 Loc) (tr1 Loc)
                      (root2 Loc) (ll2 Loc) (tr2 Loc)
                      (root3 Loc) (ll3 Loc) (tr3 Loc)
                      (root4 Loc) (ll4 Loc) (tr4 Loc)
                      (root5 Loc) (ll5 Loc) (tr5 Loc)
                      (root6 Loc) (ll6 Loc) (tr6 Loc)
                      (root7 Loc) (ll7 Loc) (tr7 Loc)
                      (root8 Loc) (ll8 Loc) (tr8 Loc)
                      (root9 Loc) (ll9 Loc) (tr9 Loc)
                      (root10 Loc) (ll10 Loc) (tr10 Loc)
                      (root11 Loc) (ll11 Loc) (tr11 Loc)
                      (root12 Loc) (ll12 Loc) (tr12 Loc)
                      (root13 Loc) (ll13 Loc) (tr13 Loc)
                      (root14 Loc) (ll14 Loc) (tr14 Loc)
                      (root15 Loc) (ll15 Loc) (tr15 Loc)
                      (root16 Loc) (ll16 Loc) (tr16 Loc)
                      (root17 Loc) (ll17 Loc) (tr17 Loc)
                      (root18 Loc) (ll18 Loc) (tr18 Loc)
                      (root19 Loc) (ll19 Loc) (tr19 Loc))
                (sep (tll_tail root0 (as nil Loc) ll0 tr0 root1)
                       (tll_tail root2 tr1 ll2 tr2 root3)
                       (tll_tail root5 tr4 ll5 tr5 root6)
                       (tll_tail root8 tr7 ll8 tr8 root9)
                       (tll_tail root10 tr9 ll10 tr10 root11)
                       (tll_tail root7 tr6 ll7 tr7 root8)
                       (tll_tail root9 tr8 ll9 tr9 root10)
                       (tll_tail root4 tr3 ll4 tr4 root5)
                       (tll_tail root13 tr12 ll13 tr13 root14)
                       (tll_tail root11 tr10 ll11 tr11 root12)
                       (tll_tail root15 tr14 ll15 tr15 root16)
                       (tll_tail root12 tr11 ll12 tr12 root13)
                       (tll_tail root17 tr16 ll17 tr17 root18)
                       (tll_tail root14 tr13 ll14 tr14 root15)
                       (tll_tail root6 tr5 ll6 tr6 root7)
                       (tll_tail root19 tr18 ll19 tr19 (as nil Loc))
                       (tll_tail root1 tr0 ll1 tr1 root2)
                       (tll_tail root16 tr15 ll16 tr16 root17)
                       (tll_tail root3 tr2 ll3 tr3 root4)
                       (tll_tail root18 tr17 ll18 tr18 root19))
             )
        )
)

(check-sat)